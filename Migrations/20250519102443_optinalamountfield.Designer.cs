// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ScoringSystem_web_api.Data;

#nullable disable

namespace ScoringSystem_web_api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250519102443_optinalamountfield")]
    partial class optinalamountfield
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ScoringSystem_web_api.Models.AuditModels.ScoringConditionDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EvaluatedConditionId")
                        .HasColumnType("int");

                    b.Property<bool>("EvaluationResult")
                        .HasColumnType("bit");

                    b.Property<decimal>("OptionalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ScoringRequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EvaluatedConditionId");

                    b.HasIndex("ScoringRequestId");

                    b.ToTable("ScoringConditionHistory");
                });

            modelBuilder.Entity("ScoringSystem_web_api.Models.AuditModels.ScoringDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EvaluatedCustomerId")
                        .HasColumnType("int");

                    b.Property<decimal?>("OptionalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("ScoringPassed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EvaluatedCustomerId");

                    b.ToTable("ScoringHistory");
                });

            modelBuilder.Entity("ScoringSystem_web_api.Models.ConditionModels.BaseCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConditionType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Properties")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ConditionStrategies");

                    b.HasDiscriminator<string>("ConditionType").HasValue("BaseCondition");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ScoringSystem_web_api.Models.CustomerModels.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.PrimitiveCollection<string>("Loans")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("ScoringSystem_web_api.Models.CustomerModels.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Salary")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ScoringSystem_web_api.Models.ConditionModels.AgeCondition", b =>
                {
                    b.HasBaseType("ScoringSystem_web_api.Models.ConditionModels.BaseCondition");

                    b.HasDiscriminator().HasValue("AgeCondition");
                });

            modelBuilder.Entity("ScoringSystem_web_api.Models.ConditionModels.SalaryCondition", b =>
                {
                    b.HasBaseType("ScoringSystem_web_api.Models.ConditionModels.BaseCondition");

                    b.HasDiscriminator().HasValue("SalaryCondition");
                });

            modelBuilder.Entity("ScoringSystem_web_api.Models.ConditionModels.TotalLoansCondition", b =>
                {
                    b.HasBaseType("ScoringSystem_web_api.Models.ConditionModels.BaseCondition");

                    b.HasDiscriminator().HasValue("TotalLoansCondition");
                });

            modelBuilder.Entity("ScoringSystem_web_api.Models.AuditModels.ScoringConditionDetails", b =>
                {
                    b.HasOne("ScoringSystem_web_api.Models.ConditionModels.BaseCondition", "EvaluatedCondition")
                        .WithMany("HistoryRecords")
                        .HasForeignKey("EvaluatedConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScoringSystem_web_api.Models.AuditModels.ScoringDetails", "ScoringRequest")
                        .WithMany()
                        .HasForeignKey("ScoringRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EvaluatedCondition");

                    b.Navigation("ScoringRequest");
                });

            modelBuilder.Entity("ScoringSystem_web_api.Models.AuditModels.ScoringDetails", b =>
                {
                    b.HasOne("ScoringSystem_web_api.Models.CustomerModels.Customer", "EvaluatedCustomer")
                        .WithMany()
                        .HasForeignKey("EvaluatedCustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EvaluatedCustomer");
                });

            modelBuilder.Entity("ScoringSystem_web_api.Models.CustomerModels.Account", b =>
                {
                    b.HasOne("ScoringSystem_web_api.Models.CustomerModels.Customer", "Customer")
                        .WithMany("Accounts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ScoringSystem_web_api.Models.ConditionModels.BaseCondition", b =>
                {
                    b.Navigation("HistoryRecords");
                });

            modelBuilder.Entity("ScoringSystem_web_api.Models.CustomerModels.Customer", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
